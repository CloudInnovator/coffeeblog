{"ast":null,"code":"var _jsxFileName = \"/home/brave/Documents/weekendproject/coffeeblog/src/components/SaveArticleButton.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\nimport './SaveArticleButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SaveArticleButton = ({\n  articleId,\n  title,\n  excerpt,\n  category,\n  url\n}) => {\n  _s();\n  const [isSaved, setIsSaved] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    checkIfSaved();\n  }, [articleId]);\n  const checkIfSaved = async () => {\n    try {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) return;\n      const {\n        data\n      } = await supabase.from('saved_articles').select('id').eq('user_id', user.id).eq('article_id', articleId).single();\n      setIsSaved(!!data);\n    } catch (error) {\n      console.error('Error checking saved status:', error);\n    }\n  };\n  const handleSave = async () => {\n    setIsLoading(true);\n    try {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) {\n        alert('Please sign in to save articles');\n        return;\n      }\n      if (isSaved) {\n        // Remove from saved articles\n        const {\n          error\n        } = await supabase.from('saved_articles').delete().eq('user_id', user.id).eq('article_id', articleId);\n        if (error) throw error;\n        setIsSaved(false);\n      } else {\n        // Add to saved articles\n        const {\n          error\n        } = await supabase.from('saved_articles').insert([{\n          user_id: user.id,\n          article_id: articleId,\n          title,\n          excerpt,\n          category,\n          url\n        }]);\n        if (error) throw error;\n        setIsSaved(true);\n      }\n    } catch (error) {\n      console.error('Error saving article:', error);\n      alert('Error saving article. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleSave,\n    disabled: isLoading,\n    className: `save-btn ${isSaved ? 'saved' : ''}`,\n    title: isSaved ? 'Remove from saved' : 'Save article',\n    children: isLoading ? '...' : isSaved ? 'ðŸ“š' : 'ðŸ”–'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(SaveArticleButton, \"jVcbDKhyMCH4uXQnE1LSfO1h0lk=\");\n_c = SaveArticleButton;\nexport default SaveArticleButton;\nvar _c;\n$RefreshReg$(_c, \"SaveArticleButton\");","map":{"version":3,"names":["React","useState","useEffect","supabase","jsxDEV","_jsxDEV","SaveArticleButton","articleId","title","excerpt","category","url","_s","isSaved","setIsSaved","isLoading","setIsLoading","checkIfSaved","data","user","auth","getUser","from","select","eq","id","single","error","console","handleSave","alert","delete","insert","user_id","article_id","onClick","disabled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/brave/Documents/weekendproject/coffeeblog/src/components/SaveArticleButton.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\nimport './SaveArticleButton.css';\n\ninterface SaveArticleButtonProps {\n  articleId: string;\n  title: string;\n  excerpt: string;\n  category: string;\n  url: string;\n}\n\nconst SaveArticleButton: React.FC<SaveArticleButtonProps> = ({\n  articleId,\n  title,\n  excerpt,\n  category,\n  url\n}) => {\n  const [isSaved, setIsSaved] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    checkIfSaved();\n  }, [articleId]);\n\n  const checkIfSaved = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data } = await supabase\n        .from('saved_articles')\n        .select('id')\n        .eq('user_id', user.id)\n        .eq('article_id', articleId)\n        .single();\n\n      setIsSaved(!!data);\n    } catch (error) {\n      console.error('Error checking saved status:', error);\n    }\n  };\n\n  const handleSave = async () => {\n    setIsLoading(true);\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        alert('Please sign in to save articles');\n        return;\n      }\n\n      if (isSaved) {\n        // Remove from saved articles\n        const { error } = await supabase\n          .from('saved_articles')\n          .delete()\n          .eq('user_id', user.id)\n          .eq('article_id', articleId);\n\n        if (error) throw error;\n        setIsSaved(false);\n      } else {\n        // Add to saved articles\n        const { error } = await supabase\n          .from('saved_articles')\n          .insert([\n            {\n              user_id: user.id,\n              article_id: articleId,\n              title,\n              excerpt,\n              category,\n              url\n            }\n          ]);\n\n        if (error) throw error;\n        setIsSaved(true);\n      }\n    } catch (error) {\n      console.error('Error saving article:', error);\n      alert('Error saving article. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <button\n      onClick={handleSave}\n      disabled={isLoading}\n      className={`save-btn ${isSaved ? 'saved' : ''}`}\n      title={isSaved ? 'Remove from saved' : 'Save article'}\n    >\n      {isLoading ? '...' : isSaved ? 'ðŸ“š' : 'ðŸ”–'}\n    </button>\n  );\n};\n\nexport default SaveArticleButton;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}